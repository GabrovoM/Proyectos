	@Test
	@DisplayName("Nombre vacío violación @NotBlank")
	public void testNombreVacio() {
	    Language language = new Language(0, " ");
	    Set<ConstraintViolation<Language>> violations = validator.validate(language);        
	    assertFalse(violations.isEmpty());            
	}
	
	@Test
	@DisplayName("Nombre inválido violación @Pattern")
	public void testNombreInvalido() {
	    Language language = new Language(0,  "nombre");
	    Set<ConstraintViolation<Language>> violations = validator.validate(language);        
	    assertFalse(violations.isEmpty());                
//	    assertTrue(violations.iterator().next().getMessage().contains("debe estar en mayúsculas"));
	}
	
	@Test
	@DisplayName("Nombre inválido > 25 violación @Size")
	public void testNombreInvalidoSizeMas15() {
	    Language language = new Language(0, "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
	    Set<ConstraintViolation<Language>> violations = validator.validate(language);    
	    System.out.println("> 25");
	    System.out.println(violations.size());
	    for (ConstraintViolation<Language> violation: violations) {
	        System.out.println("Property path "+violation.getPropertyPath());
	        System.out.println("Message "+violation.getMessage());
	        System.out.println("Invalid value "+violation.getInvalidValue());
	    }    
	    assertFalse(violations.isEmpty());                
//	    assertTrue(violations.iterator().next().getMessage().contains("between 2 and 25"));
	}

	@Test
	@DisplayName("Nombre inválido < 2 violación @Size")
	public void testNombreInvalidoSizeMenos3() {
	    Language language = new Language(0,  "A");
	    Set<ConstraintViolation<Language>> violations = validator.validate(language);    
	    System.out.println("< 3");
	    System.out.println(violations.size());
	    for (ConstraintViolation<Language> violation: violations) {
	        System.out.println("Property path "+violation.getPropertyPath());
	        System.out.println("Message "+violation.getMessage());
	        System.out.println("Invalid value "+violation.getInvalidValue());
	    }    
	    assertFalse(violations.isEmpty());                
//	    assertTrue(violations.iterator().next().getMessage().contains("between 3 and 25"));
	}

	@Test
	@DisplayName("Nombre válido")
	public void testNombreValido() {
	    Language language = new Language(0, "Italiano");
	    Set<ConstraintViolation<Language>> violations = validator.validate(language);            
	    assertTrue(violations.isEmpty());
	}

	
	@Test
	@DisplayName("Violation @NotNull")
	public void testLastUpdateNullDate() {
	    Language language = new Language(0, "Español");
	    Set<ConstraintViolation<Language>> violations = validator.validate(language);    
	    assertFalse(violations.isEmpty());    
	}